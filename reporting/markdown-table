#!/usr/bin/env python3

import argparse
import sys


def find_auto_width(indata, min_width=3):
    w = max([ len(i) for i in indata ])
    w = max(w, min_width)
    return w

def tabulate(cell_data):
    return "|" + "|".join(cell_data) + "|"

def pad_cell(cell_value, width):
    if len(cell_value) > width-2:
        cell_value = cell_value[:width-5] + "..."
        cell_value = cell_value[:width-2]
    pad_width = width - 2 - len(cell_value)
    padded_value = f" {cell_value}{' '*pad_width} "
    return padded_value

def main():
    parser = argparse.ArgumentParser(description='''
    seq 5 8 | markdown-table 3 - 5 5 "column heading"
    # creates five columns, stdin in the second one and the last one with a set column heading
''')
    parser.add_argument("column", nargs="*", type=str, help="Width (number) of a column, or - for stdin column with automatic width.")

    conf = parser.parse_args()


    indata = sys.stdin.read().splitlines()
    stdin_width = find_auto_width(indata)

    column_width = [ ]
    stdin_columns = [ ]

    headings = [ ]

    for i in range(len(conf.column)):
        column_spec = conf.column[i]

        w = 0  # Auto width
        if column_spec == "-":
           stdin_columns.append(i)
           w = stdin_width + 2  # One leading and one trailing whitespace
           headings += [ " "*w ]
        else:
            try:
                w = int(column_spec)
                headings += [ " "*w ]
            except:
                #sys.stderr.write(f"Invalid column width {column_spec}. Specify a number or - for stdin.\n")
                #return 1
                heading = f" {column_spec} "
                headings += [ heading ]
                w = len(heading)

        column_width.append(w)

    white   = [ " "*w for w in column_width ]
    hline   = [ "-"*w for w in column_width ]

    header = tabulate(headings)
    delim  = tabulate(hline)


    # Table header
    print(header)
    print(delim)

    # Data rows
    for entry in indata:
        cell_data = [ c for c in white ]
        for c in stdin_columns:
            cell_data[c] = pad_cell(entry, column_width[c])

        print(tabulate(cell_data))



if __name__ == "__main__":
    sys.exit(main())
