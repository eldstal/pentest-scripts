#!/usr/bin/env python3
#
# Create BiBTeX entry for various kinds of standard documents
# Optionally requires nvdlib https://nvdlib.com/en/latest/
# Optionally requires ietfdata https://github.com/glasgow-ipl/ietfdata

import sys
import re
import textwrap


def usage():
    print(f"{sys.argv[0]} <identifier>")
    print(f"Identifier can be one of: ")
    print(f"  CVE... to search the CVE database")
    print(f"  RFC... to search for an IETF RFC")

def wrap_comment(text, w=60):
    lines = textwrap.wrap(text, width=w)
    lines = [ f"% {l}\n" for l in lines ]
    return "".join(lines)

def make_cve(identifier):
    sys.stderr.write("Querying NIST without an API key. This will take 6 seconds.\n")

    import nvdlib

    cve = nvdlib.getCVE(identifier)

    # It's in ISO format, don't sue me
    year = cve.publishedDate.split("-")[0]

    desc = ""
    try:
        desc = cve.cve.description.description_data[0].value
    except:
        pass

    print(
f"% {cve.id}\n" +
wrap_comment(desc) +
"@misc{" + cve.id + ",\n" +
"    title={{" + cve.id + "}},\n" +
"    howpublished={\\url{" + cve.url + "}},\n" +
"    author={{NIST}},\n" +
"    year={" + year + "}\n" +
"}")


def make_rfc(identifier):

    if not re.match("^RFC[0-9]+$", identifier):
        sys.stderr.write("Unknown identifier format. Try something more like \"RFC3514\"\n")
        return

    import ietfdata.rfcindex

    ri = ietfdata.rfcindex.RFCIndex()

    rfc = None
    try:
        rfc = ri.rfc(identifier)
    except:
        sys.sterr.write(f"Unable to locate RFC {identifier}.")
        return

    fmt = "ASCII"
    if fmt not in rfc.formats:
        fmt = rfc.formats[0]

    print(
f"% {rfc.doc_id}\n" +
f"% {rfc.title}\n" +
"@misc{" + rfc.doc_id + ",\n" +
"    title={{" + rfc.doc_id + ": " + rfc.title + "}},\n" +
"    howpublished={\\url{" + rfc.content_url(fmt) + "}},\n" +
"    author={" + ", ".join(rfc.authors) + "},\n" +
"    year={" + str(rfc.year) + "}\n" +
"}")



def main():
    if len(sys.argv) != 2:
        usage()
        return 1
    if sys.argv[1][0] == "-":
        usage()
        return 1

    identifier = sys.argv[1]

    if identifier.lower()[:3] == "cve":
        make_cve(identifier)

    elif identifier.lower()[:3] == "rfc":
        make_rfc(identifier)




if __name__ == "__main__":
    sys.exit(main())
