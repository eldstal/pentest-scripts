#!/usr/bin/env python3
#
# Make a LaTeX coverage table from a MASVS 2.0 checklist xlsx
# This is all pretty brittle, and will likely break in the next MASVS release.
# It was tested on 2023-08-23 with a checklist versioned OWASP MASVS v2.0.0 (commit: f2e668b)

from openpyxl import load_workbook
import argparse
import sys
import csv
import re

RE_HYPERLINK=re.compile('=HYPERLINK\(\s*"(?P<url>[^"]+)"\s*,\s*"(?P<text>[^"]+)"\)')
RE_HYPERLINK_RESOURCE=re.compile('https://.*/(?P<resource>[^/]+)/?$')


parser = argparse.ArgumentParser("latex-from-masvs2")
parser.add_argument("input", type=str, help="The input XLSX file. Save from google docs in its entirety.")
conf = parser.parse_args()

def get_row(sheet, row_no):
    return {
        "id" : sheet[f"B{row_no}"].value,
        "platform" : sheet[f"C{row_no}"].value,
        "description" : sheet[f"D{row_no}"].value,
        "l1" : sheet[f"E{row_no}"].value,
        "l2" : sheet[f"F{row_no}"].value,
        "r" : sheet[f"G{row_no}"].value,
        "status" : sheet[f"I{row_no}"].value
    }

# Returns <text>,<url>,<resource>
# <url> may be None if the formula wasn't a hyperlink
# <resource> is the last part of the URL (e.g. filename) if present
# <resource> may be None.
def parse_hyperlink(formula):
    m = RE_HYPERLINK.match(formula)
    if not m:
        return formula,None,None

    text = m.group("text")
    url = m.group("url")
    resource = None

    m = RE_HYPERLINK_RESOURCE.match(url)
    if m:
        resource = m.group("resource")

    return text,url,resource

wb = load_workbook(filename = conf.input)

print(r"""
\scriptsize
\begin{xltabular}{\textwidth}{|X|c|c|l}
\hline
\textbf{Section/Item}     &  \textbf{Status}        & \textbf{Note}           \\\hline
\endhead
""")

# Hack to handle empty subsections in the checklist
# These are sections with names and codes but no tests defined.
subsection_size = 0
subsection_dummy_test = ""

for sheet_name in wb.sheetnames:
    if "MASVS-" not in sheet_name:
        sys.stderr.write(f"Skipping worksheet \"{sheet_name}: Probably not a checklist.\"\n")
        continue

    # This is one worksheet, covering one category of MASVS
    # For example, the first one is "MASVS-STORAGE"
    sheet = wb[sheet_name]

    header_row = None
    for row_no in range(1,20):
        if sheet[f"C{row_no}"].value == "Platform":
            header_row = row_no
            break

    if header_row is None:
        sys.stderr.write(f"Skipping worksheet \"{sheet_name}\": unable to find the headers. Spreadsheet format may have changed.\n")
        continue

    row_data = get_row(sheet, header_row)
    headers = [ row_data[name] for name in [ "id", "platform", "description", "l1", "l2", "r", "status" ] ]

    if headers != [ "MASVS-ID", "Platform", "Description", "L1", "L2", "R", "Status" ]:
        sys.stderr.write(str(headers) + "\n")
        sys.stderr.write(f"Skipping worksheet \"{sheet_name}\": unexpected set of headers. Spreadsheet format may have changed.\n")
        continue

    for row_no in range(header_row+1, 100):
        row_data = get_row(sheet, row_no)


        if all([ v is None for k,v in row_data.items() ]):
            # Entirely empty row, don't bother with it.
            continue

        elif row_data["id"] is not None:

            if subsection_size == 0:
                print(subsection_dummy_test)

            # Only the section headers have the ID specified in this version of the XLSX. Not great, but OK.
            desc = row_data["description"] or ""
            identifier,_,_ = parse_hyperlink(row_data["id"])
            text = f"{identifier} {desc}"
            print(f"\\coveragesect{{{text}}}")

            # Some sections have no tests in them.
            # That leaves them empty, and we mark the heading as pass/fail
            status = row_data["status"] or "-"
            status = status.upper()
            subsection_dummy_test = f"  \\coverageitem{{{text}}}{{{status}}}{{}}"
            subsection_size = 0

            continue

        elif (row_data["platform"] is not None
            and row_data["description"] is not None):

            # The test ID is only present in the hyperlink. Not very convenient.
            desc,url,resource = parse_hyperlink(row_data["description"])

            platform = row_data["platform"]
            status = row_data["status"] or "-"
            identifier = resource or ""

            status = status.upper()

            subsection_size += 1
            print(f"  \\coverageitem{{{identifier} [{platform}] {desc}}}{{{status}}}{{}}")
            continue

        sys.stderr.write("Unmatched row in input. Could mean that data is missing from the latex output:\n")
        sys.stderr.write(str(row_data) + "\n")

print(r"""
\end{xltabular}
\normalsize
""")
