#!/bin/bash
#
# Device setup:
# 1. Get on the same wifi with IP ${TARGET}
# 2. Set the gateway to ${GATEWAY}
#
# Host setup:
# echo 1 > /proc/sys/net/ipv4/ip_forward
# Get wireguard up on wg0 (or replace OUTSIDE with eth0 below)
# Set up a transparent proxy on port 8081, with TLS enabled and no redirection

INSIDE=wlan0
OUTSIDE=wg0
TARGET=192.168.10.50   # The device being tested
GATEWAY=192.168.10.40  # This is me.

# Set to 1 to catch all traffic to this proxy port
CATCH_ALL=1
CATCH_ALL_PORT=8081

# If CATCH_ALL isn't set, this lists hostnames to proxy,
# and their individual proxy ports
# This is hostname:port with no protocol or anything.
# You only need this if the Host header in the http requests
# doesn't match DNS, i.e. burp can't properly route the proxied
# requests to the right server.
PROXY_MAPPING=(
                #"assured.se:8082"
              )


#
# End of configuration. The rest is code.
#


IP_PROXY_MAPPING=( )
for MAP in "${PROXY_MAPPING[@]}"; do
  DEST_HOSTNAME=$(echo "${MAP}" | cut -d ":" -f 1)
  DEST_PORT=$(echo "${MAP}" | cut -d ":" -f 2)
  for DEST_IP in $(dig +short ${DEST_HOSTNAME} ); do
    IP_PROXY_MAPPING=( "${IP_PROXY_MAPPING[@]}" "${DEST_IP}:${DEST_PORT}" )
  done
done

# Now, IP_PROXY_MAPPING is a list of DEST_IP:PROXY_PORT mappings.

echo 1 > /proc/sys/net/ipv4/ip_forward

# Flush firewall
# Remove these if your iptables aren't normally clean
iptables -t nat -F PREROUTING
iptables -t nat -F POSTROUTING
iptables -F INPUT

# If we have specific proxies for any IP addresses, start with those rules
for DEST_MAP in "${IP_PROXY_MAPPING[@]}" ; do
  DEST_IP=$(echo "${DEST_MAP}" | cut -d ":" -f 1)
  DEST_PORT=$(echo "${DEST_MAP}" | cut -d ":" -f 2)
  iptables -t nat -A PREROUTING -p tcp -s ${TARGET} -d ${DEST_IP} --dport 443 -j DNAT --to-destination ${GATEWAY}:${DEST_PORT}
done

# Take any traffic on port 443 and redirect it to our proxy
if [ "${CATCH_ALL}" -eq 1 ]; then
  iptables -t nat -A PREROUTING -p tcp -s ${TARGET} --dport 443 -j DNAT --to-destination ${GATEWAY}:${CATCH_ALL_PORT}
fi

# Set up "regular" NAT for all other traffic
iptables -t nat -A POSTROUTING -o ${OUTSIDE} -j MASQUERADE
iptables -A INPUT -i ${OUTSIDE} -m state --state RELATED,ESTABLISHED -j ACCEPT

# Add these if your FORWARD policy isn't already ACCEPT
#iptables -F FORWARD
#iptables -A FORWARD -i ${INSIDE} -j ACCEPT

