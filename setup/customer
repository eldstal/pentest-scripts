#!/bin/bash

MROOT=/cust
CROOT=${MROOT}/_gocryptfs



function list {
  echo "Known projects:"
  for PROJ in $(cd ${CROOT} && ls -d *); do
    echo "${PROJ}"
  done

  echo ""
  echo "Mounted projects:"
  cat /proc/mounts | egrep "^${CROOT}" | cut -d ' ' -f 2
}

function usage {
  echo "customer <create|mount|umount> <project code>"
  list
}


function create_store {
  if [ -d "${CRYPT}" ]; then
    echo "Project ${CRYPT} already exists."
    exit
  fi

  if [ -d "${PLAIN}" ]; then
    echo "Project ${PLAIN} already exists."
    exit
  fi

  mkdir -p "${CRYPT}"
  mkdir -p "${PLAIN}"

  echo "Initializing encrypted store..."
  gocryptfs -init "${CRYPT}"

  echo "Done. "
  echo "  customer mount ${PROJECT}"
  echo "to start using your shiny new storage space."
}


function mount_store {

  if [ ! -d "${CRYPT}" ]; then
    echo "Store ${CRYPT} does not exist."
    echo "  customer create ${PROJECT}"
    echo "to create an empty store."
    return
  fi

  if [ ! -f "${CRYPT}/gocryptfs.conf" ]; then
    echo "Directory ${CRYPT} is not initialized as a gocryptfs store."
    return
  fi

  if mount | grep 'fuse.gocryptfs' | grep --quiet "${CRYPT}"; then
    echo "Already mounted."
    return
  fi

  echo "Mounting..."
  gocryptfs -allow_other ${CRYPT} ${PLAIN}
}

function unmount_store {

  if ! mount | grep 'fuse.gocryptfs' | grep --quiet "${CRYPT}"; then
    echo "Not mounted."
    return
  fi

  fusermount -u "${PLAIN}"
}


CMD=$1
PROJECT=$2

if [ -z "${PROJECT}" ]; then
  usage
  exit
fi

PLAIN="${MROOT}/${PROJECT}"
CRYPT="${CROOT}/${PROJECT}"

case ${CMD} in

  "create")
    create_store
    ;;

  "mount")
    mount_store
    ;;

  "umount")
    unmount_store
    ;;

  "unmount")
    unmount_store
    ;;

  *)
    usage
    exit
    ;;

esac
