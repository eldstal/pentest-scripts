#!/usr/bin/env python3
#
# Helper to feed CSRF tokens to sqlmap
#
# 1. Place your auth token header(s) in HTTP format in headers.txt
# 2. Customize extraction of token in do_GET
# 3. Set the expected parameter name of the token (i.e. what the target application expects)
#    in TOKEN_PARAM_NAME
# 4. Run this script, which opens an HTTP server on localhost
# 5. Point sqlmap at the web server exposed by this script with --csrf-url=
#    (see command line in script output)
# 6. Run sqlmap against the target!

import requests
from http.server import HTTPServer, BaseHTTPRequestHandler

TOKEN_GET_URL="https://target.com/some_page_with_csrf_token"
TOKEN_PARAM_NAME = "hax_token"

class MyHandler(BaseHTTPRequestHandler):
    def load_headers(self):
        headers = {}
        try:
            lines = open("headers.txt","r").read().split("\n")
        except Exception as e:
            print(e)
            return {}

        for l in lines:
            if ":" not in l: continue
            name = l.split(":")[0]
            val = l[len(name)+1:].strip()
            headers[name] = val
        return headers

    def do_GET(self):
        # Logic here to fetch and format the CSRF token
        # Output a single HTML form with input tags for sqlmap to parse
        headers = self.load_headers()
        res = requests.get(TOKEN_GET_URL, headers=headers)

        # TODO: Parse out the token from the response
        res_body = res.json()
        csrf_token = "something-from-res_body"

        out_body = f"""
        <input type="hidden" name="{TOKEN_PARAM_NAME}" value="{csrf_token}" />
        """

        self.send_response(200)
        self.end_headers()
        self.wfile.write(out_body.encode())


httpd = HTTPServer(('localhost', 10000), MyHandler)
print(f"sqlmap --headers=@headers.txt --csrf-url=http://localhost:10000 --csrf-token={TOKEN_PARAM_NAME}")
httpd.serve_forever()
