#!/bin/bash


# Looks weird, to have to use . as the target directory.
# This way, file paths in the SARIF files are relative, and
# it's easier for other tools to parse them properly!

function have_lang {
  local EXT=${1}
  if find . -iname "*.${EXT}" -type f | egrep -q '.'; then
    return 0
  fi
  return 1
}

function all_scans_in_pwd {
  echo "Scanning ${PWD} with a bunch of tools"

  # Needed for dockerized tools to be able to write their output
  chmod o+w .

  [ ! -f scan_semgrep.sarif ] && semgrep scan . --sarif --output scan_semgrep.sarif
  [ ! -f scan_bearer.sarif ] &&  bearer scan . --format sarif --output scan_bearer.sarif
  [ ! -f scan_bearer_secrets.sarif ] && bearer scan . --scanner=secrets --format sarif --output scan_bearer_secrets.sarif

  #[ ! -f scan_trivy.txt ] && trivy fs . &> scan_trivy.txt

  if [ -d ./.git ]; then
    [ ! -f scan_trufflehog.json ] && trufflehog --json filesystem --directory=. 2>&1 | tee scan_trufflehog.json
  fi

  #
  # Language-specific scanners
  #

  if have_lang "go"; then
    [ ! -f scan_gosec.sarif ] && gosec -fmt sarif -out scan_gosec.sarif ./...
  fi

  if have_lang "py"; then
    [ ! -f scan_bandit.sarif ] && bandit -r -f sarif -o scan_bandit.sarif .
  fi

  if have_lang "rb"; then
    [ ! -f scan_brakeman.sarif ] && brakeman -o scan_brakeman.sarif .
  fi

  if have_lang "csproj"; then
    [ ! -f scan_security-scan.sarif ] && security-scan $(find . -iname '*.csproj') --export=scan_security-scan.sarif .
  fi

  if have_lang "java"; then
    [ ! -f scan_spotbugs.sarif ] && spotbugs -sarif=scan_spotbugs.sarif -html=scan_spotbugs.html .
  fi

}


if [ -z "${1}" ]; then
  all_scans_in_pwd

else
  for TARGET_DIR in "${@}"; do
    [ -d "${TARGET_DIR}" ] || continue
    ( cd "${TARGET_DIR}" && all_scans_in_pwd )
  done
fi
