#!/usr/bin/env python3
#
# nmap-xml-grep
#
# Search all hosts in an NMAP xml output. List IP address of hosts whose scan results match a given regex.

import sys
import argparse
import re

import lxml
from bs4 import BeautifulSoup

def main():

  parser = argparse.ArgumentParser(description="Filter hosts from an nmap XML (-oX) output file. Specify a regex to search within each host's XML individually.")

  parser.add_argument("-d", "--debug", action="store_true", help="Print XML blocks to stderr")
  parser.add_argument("-v", "--verbose", action="store_true", help="Print matching text as well as the host IP")

  parser.add_argument("-i", "--ignore-case", action="store_true", help="Match with no consideration of text case (re.IGNORECASE)")
  parser.add_argument("-m", "--multi-line", action="store_true", help="Match over multiple lines (re.MULTILINE)")
  parser.add_argument("-s", "--dot-all", action="store_true", help="Allow the . to match newlines (re.DOTALL)")

  parser.add_argument("regex", type=str, help="Regular expression to search with. Will be applied to the XML <host> block of each host")
  parser.add_argument("filename", type=str, nargs="+", help="nmap XML output file(s) to search.")

  conf = parser.parse_args()

  flags = 0
  if conf.ignore_case: flags = flags | re.IGNORECASE
  if conf.multi_line: flags = flags | re.MULTILINE
  if conf.dot_all: flags = flags | re.DOTALL

  try:
    expr = re.compile(conf.regex, flags)

    # For user-friendliness, show the entire matching line
    if conf.multi_line:
      line_expr = expr
    else:
      line_expr = re.compile(r".*" + conf.regex + r".*", flags)

  except Exception as e:
    sys.stderr.write("Failed to parse regex: " + str(e) + "\n")
    return 1

  for path in conf.filename:
    try:
      xml = open(path, "r").read()
    except:
      sys.stderr.write(f"Unable to load input file {path}. Skipping.\n")
      continue

    document = BeautifulSoup(xml, "xml")

    for host in document.find_all("host"):
      host_text = str(host)
      if conf.debug: sys.stderr.write(host_text + "\n")

      text_match = expr.search(host_text)
      if text_match is None:
        continue

      # Not the actual search, this is just for what we show for --verbose
      line_match = line_expr.search(host_text)

      host_addr = host.find("address")
      if host_addr is None:
        sys.stderr.write("Host has no <address> . Possibly malformed input file?\n")
        continue

      if not host_addr.has_attr("addr"):
        sys.stderr.write("Host has no <address addr=...> . Possibly malformed input file?\n")
        continue

      host_ip = host_addr["addr"]


      preview_text = text_match.group(0)
      if conf.multi_line:
        preview_text = preview_text.replace("\n", r"\n")
      elif line_match is not None:
        preview_text = line_match.group(0)

      if conf.verbose:
        print(f"{host_ip}: {preview_text}")
      else:
        print(host_ip)

if __name__ == "__main__":
  sys.exit(main())
